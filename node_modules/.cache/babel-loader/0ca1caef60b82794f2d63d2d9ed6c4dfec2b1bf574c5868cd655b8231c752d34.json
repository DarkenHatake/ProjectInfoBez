{"ast":null,"code":"// api.js\n\nimport axios from 'axios';\nconst API_URL = 'http://localhost:8080/api/';\n\n// Создаем экземпляр Axios с базовым URL\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Перехватчик для добавления токена к каждому запросу\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// ====== АВТОРИЗАЦИЯ ======\n// Регистрация\nexport const registerUser = (username, password) => {\n  return api.post('auth/register', {\n    username,\n    password\n  });\n};\n\n// Логин\nexport const loginUser = (username, password) => {\n  return api.post('auth/login', {\n    username,\n    password\n  });\n};\n\n// ====== ПРЕДМЕТЫ ======\n// Получить все предметы\nexport const getSubjects = () => {\n  return api.get('subjects');\n};\nexport const getSubjectByID = async id => {\n  console.log(id);\n  try {\n    // Получаем данные (ожидаем выполнения промиса)\n    const subjects = await getSubjects(); // Должен вернуть массив\n\n    for (const dataKey in subjects.data) {\n      console.log(dataKey.id);\n      console.log(subjects.data);\n      if (dataKey.id === id) return dataKey;\n    }\n  } catch (error) {\n    console.error('Ошибка получения предмета:', error);\n    throw error;\n    return;\n  }\n};\n\n// Создать новый предмет\nexport const createSubject = title => {\n  return api.post('subjects', {\n    title\n  });\n};\n\n// Присоединиться к предмету по коду\nexport const joinSubjectByCode = code => {\n  return api.post('subjects/3/subscribe', {\n    invitationCode: code\n  });\n};\n\n// ====== ЗАДАЧИ ПО ПРЕДМЕТУ ======\n// Получить задачи предмета\nexport const getTasksBySubjectId = subjectId => {\n  console.log(\"SubjectID: \", subjectId);\n  return api.get(`subjects/${subjectId}/tasks`);\n};\n\n// Создать задачу для предмета\nexport const createSubjectTask = (subjectId, title, description, deadline) => {\n  return api.post(`subjects/${subjectId}/tasks`, {\n    title,\n    description,\n    deadline\n  });\n};\n\n// Обновить задачу предмета\nexport const updateSubjectTask = (subjectId, taskId, data) => {\n  return api.put(`subjects/${subjectId}/tasks/${taskId}`, data);\n};\n\n// Удалить задачу предмета\nexport const deleteSubjectTask = (subjectId, taskId) => {\n  return api.delete(`subjects/${subjectId}/tasks/${taskId}`);\n};\n\n// Отметить задачу выполненной / сданной\nexport const markSubjectTaskDone = (subjectId, taskId) => {\n  return api.put(`subjects/${subjectId}/tasks/${taskId}/done`, {\n    isDone: true\n  });\n};\n\n// ====== ПЕРСОНАЛЬНЫЕ ЗАДАЧИ ======\n// Получить все персональные задачи\nexport const getAllPersonalTasks = () => {\n  return api.get('personal-tasks');\n};\n\n// Получить персональную задачу по ID\nexport const getPersonalTaskById = taskId => {\n  return api.get(`personal-tasks/${taskId}`);\n};\n\n// Создать персональную задачу\nexport const createPersonalTask = (title, description) => {\n  return api.post('personal-tasks', {\n    title,\n    description\n  });\n};\n\n// Обновить персональную задачу\nexport const updatePersonalTask = (taskId, data) => {\n  return api.put(`personal-tasks/${taskId}`, data);\n};\n\n// Удалить персональную задачу\nexport const deletePersonalTask = taskId => {\n  return api.delete(`personal-tasks/${taskId}`);\n};\n\n// ====== ПРОФИЛЬ ПОЛЬЗОВАТЕЛЯ ======\n// Получить данные профиля\nexport const getProfile = () => {\n  return api.get('profile');\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","registerUser","username","password","post","loginUser","getSubjects","get","getSubjectByID","id","console","log","subjects","dataKey","data","createSubject","title","joinSubjectByCode","code","invitationCode","getTasksBySubjectId","subjectId","createSubjectTask","description","deadline","updateSubjectTask","taskId","put","deleteSubjectTask","delete","markSubjectTaskDone","isDone","getAllPersonalTasks","getPersonalTaskById","createPersonalTask","updatePersonalTask","deletePersonalTask","getProfile"],"sources":["C:/Users/KalderAA/ProjectInfoBez/src/api.js"],"sourcesContent":["// api.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api/';\r\n\r\n// Создаем экземпляр Axios с базовым URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\n// Перехватчик для добавления токена к каждому запросу\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n}, (error) => {\r\n  return Promise.reject(error);\r\n});\r\n\r\n// ====== АВТОРИЗАЦИЯ ======\r\n// Регистрация\r\nexport const registerUser = (username, password) => {\r\n  return api.post('auth/register', { username, password });\r\n};\r\n\r\n// Логин\r\nexport const loginUser = (username, password) => {\r\n  return api.post('auth/login', { username, password });\r\n};\r\n\r\n// ====== ПРЕДМЕТЫ ======\r\n// Получить все предметы\r\nexport const getSubjects = () => {\r\n  return api.get('subjects');\r\n};\r\n\r\nexport const getSubjectByID = async (id) => {\r\n  console.log(id)\r\n  try {\r\n    // Получаем данные (ожидаем выполнения промиса)\r\n    const subjects = await getSubjects(); // Должен вернуть массив\r\n\r\n    for (const dataKey in subjects.data) {\r\n      console.log(dataKey.id)\r\n      console.log(subjects.data)\r\n      if (dataKey.id === id)\r\n        return dataKey\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка получения предмета:', error);\r\n    throw error;\r\n    return\r\n  }\r\n};\r\n\r\n// Создать новый предмет\r\nexport const createSubject = (title) => {\r\n  return api.post('subjects', { title });\r\n};\r\n\r\n// Присоединиться к предмету по коду\r\nexport const joinSubjectByCode = (code) => {\r\n  return api.post('subjects/3/subscribe', { invitationCode: code });\r\n};\r\n\r\n// ====== ЗАДАЧИ ПО ПРЕДМЕТУ ======\r\n// Получить задачи предмета\r\nexport const getTasksBySubjectId = (subjectId) => {\r\n  console.log(\"SubjectID: \", subjectId)\r\n  return api.get(`subjects/${subjectId}/tasks`);\r\n};\r\n\r\n// Создать задачу для предмета\r\nexport const createSubjectTask = (subjectId, title, description, deadline) => {\r\n  return api.post(`subjects/${subjectId}/tasks`, {\r\n    title,\r\n    description,\r\n    deadline,\r\n  });\r\n};\r\n\r\n// Обновить задачу предмета\r\nexport const updateSubjectTask = (subjectId, taskId, data) => {\r\n  return api.put(`subjects/${subjectId}/tasks/${taskId}`, data);\r\n};\r\n\r\n// Удалить задачу предмета\r\nexport const deleteSubjectTask = (subjectId, taskId) => {\r\n  return api.delete(`subjects/${subjectId}/tasks/${taskId}`);\r\n};\r\n\r\n// Отметить задачу выполненной / сданной\r\nexport const markSubjectTaskDone = (subjectId, taskId) => {\r\n  return api.put(`subjects/${subjectId}/tasks/${taskId}/done`, { isDone: true });\r\n};\r\n\r\n// ====== ПЕРСОНАЛЬНЫЕ ЗАДАЧИ ======\r\n// Получить все персональные задачи\r\nexport const getAllPersonalTasks = () => {\r\n  return api.get('personal-tasks');\r\n};\r\n\r\n// Получить персональную задачу по ID\r\nexport const getPersonalTaskById = (taskId) => {\r\n  return api.get(`personal-tasks/${taskId}`);\r\n};\r\n\r\n// Создать персональную задачу\r\nexport const createPersonalTask = (title, description) => {\r\n  return api.post('personal-tasks', { title, description });\r\n};\r\n\r\n// Обновить персональную задачу\r\nexport const updatePersonalTask = (taskId, data) => {\r\n  return api.put(`personal-tasks/${taskId}`, data);\r\n};\r\n\r\n// Удалить персональную задачу\r\nexport const deletePersonalTask = (taskId) => {\r\n  return api.delete(`personal-tasks/${taskId}`);\r\n};\r\n\r\n// ====== ПРОФИЛЬ ПОЛЬЗОВАТЕЛЯ ======\r\n// Получить данные профиля\r\nexport const getProfile = () => {\r\n  return api.get('profile');\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}