{"ast":null,"code":"// api.js\n\nimport axios from 'axios';\nconst API_URL = 'http://localhost:3000/api/';\n\n// Создаем экземпляр Axios с базовым URL\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Перехватчик для добавления токена к каждому запросу\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// ====== АВТОРИЗАЦИЯ ======\n// Регистрация\nexport const registerUser = (username, password) => {\n  return api.post('auth/register', {\n    username,\n    password\n  });\n};\n\n// Логин\nexport const loginUser = (username, password) => {\n  return api.post('auth/login', {\n    username,\n    password\n  });\n};\n\n// ====== ПРЕДМЕТЫ ======\n// Получить все предметы\nexport const getSubjects = () => {\n  return api.get('subjects');\n};\nexport const getSubjectByID = async id => {\n  return api.get('subjects/' + id);\n};\n\n// Создать новый предмет\nexport const createSubject = (title, description) => {\n  return api.post('subjects', {\n    title,\n    description\n  });\n};\n\n// Присоединиться к предмету по коду\nexport const joinSubjectByCode = (id, code) => {\n  return api.post(`subjects/subscribe`, {\n    invitationCode: code\n  });\n};\n\n// Присоединиться к предмету по коду\nexport const deleteSubject = id => {\n  return api.delete(`subjects/${id}`);\n};\n\n// ====== ЗАДАЧИ ПО ПРЕДМЕТУ ======\n// Получить задачи предмета\nexport const getTasksBySubjectId = subjectId => {\n  console.log(\"SubjectID: \", subjectId);\n  return api.get(`subjects/${subjectId}/tasks`);\n};\n\n// Создать задачу для предмета\nexport const createSubjectTask = (subjectId, title, description, deadline) => {\n  return api.post(`subjects/${subjectId}/tasks`, {\n    title,\n    description,\n    deadline\n  });\n};\n\n// Обновить задачу предмета\nexport const updateSubjectTask = (subjectId, taskId, title, deskription, deadline) => {\n  return api.put(`subjects/${subjectId}/tasks/${taskId}`, title, deskription, deadline);\n};\n\n// Удалить задачу предмета\nexport const deleteSubjectTask = (subjectId, taskId) => {\n  return api.delete(`subjects/${subjectId}/tasks/${taskId}`);\n};\n\n// Отметить задачу выполненной / сданной\nexport const markSubjectTaskDone = (subjectId, taskId) => {\n  return api.put(`subjects/${subjectId}/tasks/${taskId}/done`, {\n    isDone: true\n  });\n};\n\n// Отметить задачу выполненной / сданной\nexport const markSubjectTaskPassed = (subjectId, taskId) => {\n  return api.put(`subjects/${subjectId}/tasks/${taskId}/pass`, {\n    isPassed: true\n  });\n};\n\n// ====== ПЕРСОНАЛЬНЫЕ ЗАДАЧИ ======\n// Получить все персональные задачи\nexport const getAllPersonalTasks = () => {\n  return api.get('personal-tasks');\n};\n// Отметить задачу выполненной / сданной\nexport const markPersonalTaskDone = taskId => {\n  return api.put(`personal-tasks/${taskId}/pass`, {\n    isPassed: true\n  });\n};\n// Получить персональную задачу по ID\nexport const getPersonalTaskById = taskId => {\n  return api.get(`personal-tasks/${taskId}`);\n};\n\n// Создать персональную задачу\nexport const createPersonalTask = (title, description, deadline) => {\n  return api.post('personal-tasks', {\n    title,\n    description,\n    deadline\n  });\n};\n\n// Обновить персональную задачу\nexport const updatePersonalTask = (taskId, data) => {\n  return api.put(`personal-tasks/${taskId}`, data);\n};\n\n// Удалить персональную задачу\nexport const deletePersonalTask = taskId => {\n  return api.delete(`personal-tasks/${taskId}`);\n};\n\n// ====== ПРОФИЛЬ ПОЛЬЗОВАТЕЛЯ ======\n// Получить данные профиля\nexport const getProfile = () => {\n  return api.get('profile');\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","registerUser","username","password","post","loginUser","getSubjects","get","getSubjectByID","id","createSubject","title","description","joinSubjectByCode","code","invitationCode","deleteSubject","delete","getTasksBySubjectId","subjectId","console","log","createSubjectTask","deadline","updateSubjectTask","taskId","deskription","put","deleteSubjectTask","markSubjectTaskDone","isDone","markSubjectTaskPassed","isPassed","getAllPersonalTasks","markPersonalTaskDone","getPersonalTaskById","createPersonalTask","updatePersonalTask","data","deletePersonalTask","getProfile"],"sources":["C:/Users/KalderAA/ProjectInfoBez/src/api.js"],"sourcesContent":["// api.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:3000/api/';\r\n\r\n// Создаем экземпляр Axios с базовым URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\n// Перехватчик для добавления токена к каждому запросу\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n}, (error) => {\r\n  return Promise.reject(error);\r\n});\r\n\r\n// ====== АВТОРИЗАЦИЯ ======\r\n// Регистрация\r\nexport const registerUser = (username, password) => {\r\n  return api.post('auth/register', { username, password });\r\n};\r\n\r\n// Логин\r\nexport const loginUser = (username, password) => {\r\n  return api.post('auth/login', { username, password });\r\n};\r\n\r\n// ====== ПРЕДМЕТЫ ======\r\n// Получить все предметы\r\nexport const getSubjects = () => {\r\n  return api.get('subjects');\r\n};\r\n\r\nexport const getSubjectByID = async (id) => {\r\n  return api.get('subjects/' + id);\r\n};\r\n\r\n// Создать новый предмет\r\nexport const createSubject = (title,description) => {\r\n  return api.post('subjects', { title,description });\r\n};\r\n\r\n// Присоединиться к предмету по коду\r\nexport const joinSubjectByCode = (id,code) => {\r\n  return api.post(`subjects/subscribe`, { invitationCode: code });\r\n};\r\n\r\n// Присоединиться к предмету по коду\r\nexport const deleteSubject = (id) => {\r\n  return api.delete(`subjects/${id}`);\r\n};\r\n\r\n// ====== ЗАДАЧИ ПО ПРЕДМЕТУ ======\r\n// Получить задачи предмета\r\nexport const getTasksBySubjectId = (subjectId) => {\r\n  console.log(\"SubjectID: \", subjectId)\r\n  return api.get(`subjects/${subjectId}/tasks`);\r\n};\r\n\r\n\r\n// Создать задачу для предмета\r\nexport const createSubjectTask = (subjectId, title, description, deadline) => {\r\n  return api.post(`subjects/${subjectId}/tasks`, {\r\n    title,\r\n    description,\r\n    deadline,\r\n  });\r\n};\r\n\r\n// Обновить задачу предмета\r\nexport const updateSubjectTask = (subjectId, taskId, title, deskription, deadline) => {\r\n  return api.put(`subjects/${subjectId}/tasks/${taskId}`, title, deskription, deadline);\r\n};\r\n\r\n// Удалить задачу предмета\r\nexport const deleteSubjectTask = (subjectId, taskId) => {\r\n  return api.delete(`subjects/${subjectId}/tasks/${taskId}`);\r\n};\r\n\r\n// Отметить задачу выполненной / сданной\r\nexport const markSubjectTaskDone = (subjectId, taskId) => {\r\n  return api.put(`subjects/${subjectId}/tasks/${taskId}/done`, { isDone: true });\r\n};\r\n\r\n// Отметить задачу выполненной / сданной\r\nexport const markSubjectTaskPassed = (subjectId, taskId) => {\r\n  return api.put(`subjects/${subjectId}/tasks/${taskId}/pass`, { isPassed: true });\r\n};\r\n\r\n// ====== ПЕРСОНАЛЬНЫЕ ЗАДАЧИ ======\r\n// Получить все персональные задачи\r\nexport const getAllPersonalTasks = () => {\r\n  return api.get('personal-tasks');\r\n};\r\n// Отметить задачу выполненной / сданной\r\nexport const markPersonalTaskDone = ( taskId) => {\r\n  return api.put(`personal-tasks/${taskId}/pass`, { isPassed: true });\r\n};\r\n// Получить персональную задачу по ID\r\nexport const getPersonalTaskById = (taskId) => {\r\n  return api.get(`personal-tasks/${taskId}`);\r\n};\r\n\r\n// Создать персональную задачу\r\nexport const createPersonalTask = (title, description, deadline) => {\r\n  return api.post('personal-tasks', { title, description, deadline });\r\n};\r\n\r\n// Обновить персональную задачу\r\nexport const updatePersonalTask = (taskId, data) => {\r\n  return api.put(`personal-tasks/${taskId}`, data);\r\n};\r\n\r\n// Удалить персональную задачу\r\nexport const deletePersonalTask = (taskId) => {\r\n  return api.delete(`personal-tasks/${taskId}`);\r\n};\r\n\r\n// ====== ПРОФИЛЬ ПОЛЬЗОВАТЕЛЯ ======\r\n// Получить данные профиля\r\nexport const getProfile = () => {\r\n  return api.get('profile');\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}