{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KalderAA\\\\task\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport './styles/App.css';\nimport TaskInput from './components/TaskInput';\nimport TaskList from './components/TaskList';\nimport Navigation from './components/Navigation'; // Импортируем компонент навигации\n\n// Главный компонент приложения\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  /*const [tasks, setTasks] = useState([]); // Состояние для хранения списка задач\n  const [taskInput, setTaskInput] = useState(''); // Состояние для хранения текста новой задачи\n  const [deadlineInput, setDeadlineInput] = useState(''); // Состояние для хранения дедлайна новой задачи\n   // Обработчик изменения текста в поле ввода задачи\n  const handleInputChange = (e) => {\n      setTaskInput(e.target.value); // Обновляем состояние taskInput на основе ввода пользователя\n  };\n   // Обработчик изменения даты в поле ввода дедлайна\n  const handleDeadlineChange = (e) => {\n      setDeadlineInput(e.target.value); // Обновляем состояние deadlineInput на основе ввода пользователя\n  };\n   // Функция добавления новой задачи\n  const addTask = () => {\n      if (taskInput.trim()) { // Проверяем, что введенный текст не пустой\n          setTasks([\n              ...tasks,\n              {\n                  id: Date.now(),\n                  text: taskInput,\n                  deadline: deadlineInput || 'Без дедлайна', // Если дедлайн не указан, устанавливаем значение по умолчанию\n                  completed: false,\n              },\n          ]); // Добавляем новую задачу в список\n          setTaskInput(''); // Очищаем поле ввода задачи после добавления\n          setDeadlineInput(''); // Очищаем поле ввода дедлайна после добавления\n      }\n  };\n   // Функция переключения состояния завершения задачи\n  const toggleTaskCompletion = (id) => {\n      setTasks(tasks.map(task =>\n          task.id === id ? { ...task, completed: !task.completed } : task // Меняем состояние completed для выбранной задачи\n      ));\n  };\n   // Функция удаления задачи из списка\n  const deleteTask = (id) => {\n      setTasks(tasks.filter(task => task.id !== id)); // Фильтруем задачи, оставляя только те, которые не были удалены\n  };*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_c = App;\nexport default App; // Экспортируем главный компонент приложения\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TaskInput","TaskList","Navigation","jsxDEV","_jsxDEV","App","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/KalderAA/task/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './styles/App.css';\nimport TaskInput from './components/TaskInput';\nimport TaskList from './components/TaskList';\nimport Navigation from './components/Navigation'; // Импортируем компонент навигации\n\n// Главный компонент приложения\nconst App = () => {\n    /*const [tasks, setTasks] = useState([]); // Состояние для хранения списка задач\n    const [taskInput, setTaskInput] = useState(''); // Состояние для хранения текста новой задачи\n    const [deadlineInput, setDeadlineInput] = useState(''); // Состояние для хранения дедлайна новой задачи\n\n    // Обработчик изменения текста в поле ввода задачи\n    const handleInputChange = (e) => {\n        setTaskInput(e.target.value); // Обновляем состояние taskInput на основе ввода пользователя\n    };\n\n    // Обработчик изменения даты в поле ввода дедлайна\n    const handleDeadlineChange = (e) => {\n        setDeadlineInput(e.target.value); // Обновляем состояние deadlineInput на основе ввода пользователя\n    };\n\n    // Функция добавления новой задачи\n    const addTask = () => {\n        if (taskInput.trim()) { // Проверяем, что введенный текст не пустой\n            setTasks([\n                ...tasks,\n                {\n                    id: Date.now(),\n                    text: taskInput,\n                    deadline: deadlineInput || 'Без дедлайна', // Если дедлайн не указан, устанавливаем значение по умолчанию\n                    completed: false,\n                },\n            ]); // Добавляем новую задачу в список\n            setTaskInput(''); // Очищаем поле ввода задачи после добавления\n            setDeadlineInput(''); // Очищаем поле ввода дедлайна после добавления\n        }\n    };\n\n    // Функция переключения состояния завершения задачи\n    const toggleTaskCompletion = (id) => {\n        setTasks(tasks.map(task =>\n            task.id === id ? { ...task, completed: !task.completed } : task // Меняем состояние completed для выбранной задачи\n        ));\n    };\n\n    // Функция удаления задачи из списка\n    const deleteTask = (id) => {\n        setTasks(tasks.filter(task => task.id !== id)); // Фильтруем задачи, оставляя только те, которые не были удалены\n    };*/\n\n    return (\n        <div className=\"app\">\n            <Navigation /> {/* Добавляем компонент навигации */}\n            {/*<h1>Личные задачи</h1>\n             Используем компонент ввода задачи\n            <TaskInput\n                taskInput={taskInput}\n                deadlineInput={deadlineInput} // Передаем состояние дедлайна в TaskInput\n                handleInputChange={handleInputChange}\n                handleDeadlineChange={handleDeadlineChange} // Передаем обработчик изменения дедлайна\n                addTask={addTask}\n            />\n             Используем компонент списка задач\n            <TaskList\n                tasks={tasks}\n                toggleTaskCompletion={toggleTaskCompletion}\n                deleteTask={deleteTask}\n            />*/}\n        </div>\n    );\n};\n\nexport default App; // Экспортируем главный компонент приложения\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,kBAAkB;AACzB,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,UAAU,MAAM,yBAAyB,CAAC,CAAC;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EACd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAOI,oBACID,OAAA;IAAKE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBH,OAAA,CAACF,UAAU;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAgBd,CAAC;AAEd,CAAC;AAACC,EAAA,GAhEIP,GAAG;AAkET,eAAeA,GAAG,CAAC,CAAC;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}